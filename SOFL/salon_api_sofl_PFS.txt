/* SOFL Formal Specifications for Salon API project with Process Functional Scenarios */
/* Begin class declarations */

class SalonUser;
type
Year = string;
Month = string;
Day = string;
DOB = Year * Month * Day;
UserRoles = {<SALONOWNER>, <SALONCUSTOMER>} /* Set enumerating user types in the context of the salon booking system */
User_Selection = {<owner>, <customer>}


var
id: string
email: string
password: string
date_of_birth: DOB
nationality: string
city: string
role: UserRoles

inv

len(id) == 36; /* define ids as of standard UUID string type with length of 36 characters */

method Init()
  post role = {} and id = " " and email = " " and password = " " and date_of_birth = nil and nationality = " " and city = " "

end_method;

method Set_SalonUserAttributes(id: string, email: string, password: string date_of_birth: DOB, nationality: string, city: string)
    post id=id and email=email and password=password and date_of_birth=date_of_birth and nationality=nationality and city=city

end_method;

method Set_SalonUserRole(role_selection: User_Selection)
  explicit
    begin
      post case role_selection of
            <owner> -> this.role := <SALONOWNER>
            <customer> -> this.role := <SALONCUSTOMER>
          end_case
    end
end_method

end_class;


class Price;

var
service_price: nat0

inv
0 < service_price <= 1000000
method Init()
  post service_price = 0
end_method;

method validPrice(service_price: nat0) service_price: nat0
  post (exists[x: nat0] | 0 < x <= 100000 and service_price = x)
end_method;

end_class;

/* End class declarations */


module Salon_API;

type
Year = string;
Month = string;
Day = string;
DOB = Year * Month * Day;

hour = string;
minutes = string;
token = string;
User_Selection = {<owner>, <customer>}

Timestamp = Year * Month * Day * hour * minutes;

AddressData = composed of
                address_country = string
                address_city = string
                address_region = string
                postal_code = string
                address_street = string
                latitude = nat0
                longitude = nat0
              end;


SalonData = composed of
              id = string
              owner = SalonUser
              business_name = string
              business_type = string
              business_description = string
              business_phone_number = string
              business_email = string
              business_address = AddressData
              price_range = string
              created = Timestamp
            end;

SalonServiceCategoryData = composed of
                            id = nat0
                            owner = SalonUser
                            category_name = string
                            created = Timestamp
                          end;

SalonServiceData = composed of
                    id = string
                    owner = SalonUser
                    service_category = SalonServiceCategoryData
                    linked_business = SalonData
                    service_price = Price
                    service_duration = string
                    service_name = string
                  end;

SalonServiceCancellationReasonData = composed of
                                      id = string
                                      owner = SalonUser
                                      cancellation_reason = string
                                      added_date = Timestamp
                                    end;

SalonBookingData = composed of
                    id = string
                    salon_customer = SalonUser
                    booked_in_by = SalonUser
                    stylist = SalonUser
                    booked_service = SalonServiceData
                    booking_creation_date: Timestamp
                    service_date: Timestamp
                    service_started = bool
                    service_completed = bool
                    service_cancelled = bool
                    cancellation_reason = SalonServiceCancellationReasonData
                    negotiate_service_price = bool
                    negotiated_price = Price
                  end;

SalonOperationDaysData = composed of
                          id = string
                          owner = SalonUser
                          linked_business = SalonData
                          day_of_week = string
                          start_time = Timestamp 
                          end_time = Timestamp
                        end;

SalonStylistData = composed of 
                    id = string
                    owner = SalonUser
                    first_name = string
                    last_name = string
                    phone_number = string
                    email = string
                    salon_service = SalonServiceData
                    salon_branch = SalonData
                    working_days = SalonOperationDaysData
                    date_joined = Timestamp
                  end;

SalonTable = map SalonData to SalonUser;
SalonServicesCategoriesTable = seq of SalonServiceCategoryData;
SalonServiceTable = map SalonServiceData to SalonServiceCategoryData;
SingleSalonServiceTable = map SalonServiceData to SalonData;

var

/* External data stores for salon records */
#salons_table: SalonTable
#salon_services: SalonServiceTable
#single_salon_services: SingleSalonServiceTable
#salon_services_categories: SalonServiceCategoriesTable
#salon_customers_table: map SalonUser to SalonData;
#salon_bookings_table: map SalonBookingData to SalonUser;
#salon_stylist_table: map SalonStylistData to SalonData;
#salon_users_table: seq of SalonUsers;


inv
/* Each salon category is unique
  Each user is unique and has a unique id
 */
forall[i,j: inds(salon_services_categories)] | salon_services_categories(i) <> salon_services_categories(j) => salon_services_categories(i).id <> salon_services_categories(j).id;
forall [i,j: inds(salon_users_table)] | salon_users_table(i) <> salon_users_table(j) => salon_users_table(i).id <> salon_users_table(j).id



process CreateSalonUser(access_token: token, id: string, email: string, date_of_birth: DOB, password: string, nationality: string, city: string, role_selection: User_Selection ) salonuser: SalonUser, response_status: string | error_message: string
ext wr salon_users_table
pre not exists[i: inset salon_users_table] | i.id = id
explicit
  begin
    if access_token <> nil and elems(access_token) <> {}
    then
      salonuser := new SalonUser
      salonuser := salonuser.SetSalonUserAttributes(id, email, password, date_of_birth, nationality, city)
      salonuser := salonuser.Set_SalonUserRole(role_selection)
      salon_users_table := union(~salon_users_table, {salonuser})
      response_status := "Http 200 Ok"
    else
      error_message := "Http 401, Permission Denied, Permission denied"
  end
end_process;

 
process RetrieveSalon(access_token: token, salon_id: string, salonuser: SalonUser) salon: SalonData, response_status: string | error_message: string
/* API resource path: /salons/{salon_id}
Guard condition (Injected Security Requirement): User must be of role <SALONOWNER> to avoid indirect object access vulnerability
 */


ext rd salons_table
ext rd salon_users_table
pre exists[i: inset dom(salons_table)] | i.id = salon_id
                and salons_table(i) = salonuser
                  and salonuser inset(elems(salon_users_table))
                
post exists![i: inset dom(salons_table)] | i.id = salon_id | i = salon | salons_table(i) = salonuser and salonuser.role = <SALONOWNER>
                => len(access_token) <> 0 
                      and access_token <> nil
                        and salonuser inset(elems(salon_users_table))
                          and salons_table(salon) = salonuser
                            and salon.id = salon_id
                              and response_status = "Http 200 Ok"
                or
                error_message = "Http 401, Permission Denied"
                  => len(access_token) = 0
                        and exists![i: inset dom(salons_table)] | i.id = salon_id | salons_table(i) = salonuser and salonuser.role = <SALONOWNER>
                            and salonuser inset(elems(salon_users_table))
                or error_message = "Http 401, Permission Denied"
                    => access_token = nil
                        and exists![i: inset dom(salons_table)] | i.id = salon_id | salons_table(i) = salonuser and salonuser.role = <SALONOWNER>
                            and salonuser inset(elems(salon_users_table))
                or error_message = "Http 403, Forbidden"
                    => len(access_token) <> 0 
                      and access_token <> nil
                        and exists![i: inset dom(salons_table)] | i.id = salon_id | salons_table(i) = salonuser and salonuser.role <> <SALONOWNER>
                            and salonuser inset(elems(salon_users_table))
                                and salon.id = salon_id
                                        
end_process;

process RetrieveSalons(access_token: token, resource_path: string) salons: SalonTable, response_status: string | error_message: string
/* API resource path: /salons 
Guard condition(Injected security requirement): Access token must be provided
*/
ext rd salons_table
pre elem(resource_path) <> {}
post salons = salons_table
                => elems(access_token) <> {}
                      and access_token <> nil
                        and elems(resource_path) <> {}
                          and response_status ="Http 200 Ok"
            or 
                error_message = "Http 401, Permission Denied"
                    => elems(access_token) = {}
                          and elems(resource_path) <> {}
            or error_message = "Http 401, Permission Denied"
                => and access_token = nil
                    and elems(resource_path) <> {}

end_process;

process AddSalon(access_token:token, salon: SalonData, owner: SalonUser) added_salon: SalonData, response_status: string | error_message: string
/* API resource path: /salons */
ext wr salons_table
ext rd salon_users_table

pre not exists[i: inset dom(salons_table) ] | i = salon  | salons_table(i) = owner
                and owner inset elems(salon_users_table)
 
post  exists[i: inset dom(salons_table)] | i = added_salon and salons_table(i) = owner and owner.role = <SALONOWNER>
                => len(access_token) <> 0
                      and access_token <> nil
                        and salons_table = override(~salons_table, {salon -> owner}) 
                          and added_salon inset dom(salons_table) 
                            and salons_table(added_salon) = owner
                              and salons_table(added_salon).role = <SALONOWNER>
                                and salons_table <> ~salons_table
                                  and response_status = "Http 200 Ok"
            or
                error_message = "Http 401, Permission Denied"
                  => len(access_token) = 0
                        and not exists[i: inset dom(salons_table) ] | i = salon  | salons_table(i) = owner
                            and owner inset elems(salon_users_table)
                                and owner.role = <SALONOWNER>
            or
                error_message = "Http 401, Permission Denied"
                    => access_token = nil
                          and not exists[i: inset dom(salons_table) ] | i = salon  | salons_table(i) = owner
                              and owner inset elems(salon_users_table)
                                and owner.role = <SALONOWNER>
            or  error_message = "Http 403, Forbidden"
                    => len(access_token) <> 0
                            and access_token <> nil
                                and not exists[i: inset dom(salons_table) ] | i = salon  | salons_table(i) = owner
                                    and owner inset elems(salon_users_table)
                                         and owner.role <> <SALONOWNER>

end_process;

process DeleteSalon(access_token:token, salon_id=string, owner: SalonUser) deleted_salon: SalonData, response_status: string | error_message: string
/* API resource path: /salons/{salon_id} */

ext wr salons_table
ext rd salon_users_table

pre exists![i: inset dom(salons_table)] | i.id = salon_id | salons_table(i) = owner and owner.role = <SALONOWNER> 
post ~salons_table = override(salons_table, {deleted_salon -> owner}) 
                  => len(access_token) <> 0 
                      and access_token <> nil 
                        and exists![i: inset dom(~salons_table)] | i.id = salon_id | ~salons_table(i) = owner and owner.role = <SALONOWNER>
                          and deleted_salon.owner = owner
                            and owner inset elems(salon_users_table)
                                and owner.role = <SALONOWNER>
                                    and deleted_salon.id = salon_id
                                        and salons_table <> ~salon_table
                                            and response_status = "Http 204"
                or
                    error_message = "Http 401, Permission Denied"
                        => len(access_token) = 0
                                and exists![i: inset dom(salons_table)] | i.id = salon_id | salons_table(i) = owner and owner.role = <SALONOWNER>
                                    and owner inset elems(salon_users_table)
                                        and owner.role = <SALONOWNER>

                or
                    error_message = "Http 401, Permission Denied"
                        => access_token = nil
                            and exists![i: inset dom(salons_table)] | i.id = salon_id | salons_table(i) = owner and owner.role = <SALONOWNER>
                                and owner inset elems(salon_users_table)
                                        and owner.role = <SALONOWNER>
                or
                    error_message = "Http 403, Forbidden"
                        => len(access_token) <> 0
                            and access_token <> nil
                                and exists![i: inset dom(salons_table)] | i.id = salon_id | salons_table(i) = owner and owner.role = <SALONOWNER>
                                    and owner inset elems(salon_users_table)
                                        and owner.role <> <SALONOWNER>


end_process;

process AddSalonServiceCategory(access_token:token, category: SalonServiceCategoryData) added_category: SalonServiceCategoryData, response_status: string | error_message: string

/* API resource path: /salons/salon-services-categories */
ext wr salon_services_categories
pre not exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category.id
post salon_services_categories = conc(~salon_services_categories, [category])
                => len(access_token) <> 0
                      and access_token <> nil 
                        and added_category.id = category.id 
                          and added_category inset elems(salon_services_categories)
                            and len(~salon_services_categories) <> len(salon_services_categories)
                              and response_status = "Http 201"
            or
                error_message = "Http 401, Permission Denied"
                    => len(access_token) = 0
                            and not exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category.id
            or 
                error_message = "Http 401, Permission Denied"
                    => access_token = nil
                        and not exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category.id

end_process;

process GetSalonServiceCategories(request_path: string, access_token: token) service_categories: SalonServiceCategoriesTable, response_status: string | error_message: string
/* API resource path: /salons/salon-services-categories */

ext rd salon_services_categories
pre elems(request_path) <> {}
post service_categories = salon_services_categories
                => len(access_token) <> 0
                      and access_token <> nil 
                        and elems(request_path) <> {}  
                            and response_status = "Http 200"
                or
                  error_message = "Http 401, Permission Denied"
                    => len(access_token) = 0
                        and elems(request_path) <> {}
                or  
                    error_message = "Http 401, Permission Denied"
                    => access_token = nil
                        and elems(request_path) <> {}

end_process;

process GetSalonServiceCategory(access_token: token, category_id: string) service_category: SalonServiceCategoryData, response_message: string | error_message: string
/* API resource path: /salons/{salon_id}/salon-services-categories/{category_id} */

ext rd salon_services_categories
pre exists[i: inds(salon_services_categories)] | salon_services_categores(i).id = category_id
post exists[i: inds(salon_services_categories)] | salon_services_categores(i).id = category_id
                => len(access_token) <> 0
                      and access_token <> nil 
                        and exists![i: inds(salon_services_categories)] | salon_services_categories(i).id = category_id
                          and service_category.id = category_id
                            and response_message = "Http 200"
                or 
                  error_message = "Http 401, Permission Denied"
                    => len(access_token) = 0
                        and exists[i: inds(salon_services_categories)] | salon_services_categores(i).id = category_id
                or 
                    error_message = "Http 401, Permission Denied"
                        => access_token = nil
                            and exists[i: inds(salon_services_categories)] | salon_services_categores(i).id = category_id

end_process;


process DeleteSalonServiceCategory(access_token: token, category_id: string) deleted_category: SalonServiceCategoryData, response_status: string | error_message: string
/* API resource path: /salons/{salon_id}/salon-services-categories/{category_id} */
ext wr salon_services_categories
pre exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category_id
post not exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category_id | salon_services_categories(i) = deleted_category
            => len(access_token) <> 0 
                  and access_token <> nil
                    and salon_services_categories = conc(~salon_services_categories, [deleted_category])
                      and len(salon_services_categories) <> len(~salon_services_categories)
                         and deleted_category.id = category_id
                            and response_status = "Http 204")
            or
              error_message = "Http 401, Permission Denied"
                => len(access_token) = 0
                    and exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category_id
            or 
                error_message = "Http 401, Permission Denied"
                    => access_token = nil
                        and exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category_id

end_process;

process GetSalonCategoryServices(access_token: token, salon_id, category_id: string) service_list: SalonServiceTable, response_message: string | error_message: string
/* API resource path: /salons/{salon_id}/salon-services-categories/{category_id}/salon-services
Get specific salon services for a specific service category
 */ 
ext rd salon_services
ext rd single_salon_services
pre exists[i: inset dom(salon_services)] salon_services(i).id = category_id
post service_list = salon_services 
                => len(access_token) <> 0 
                    and access_token <> nil 
                         and exists[i: inset dom(salon_services)] | salon_services(i).id = category_id 
                            and exists[j: inset dom(single_salon_services)] | single_salon_services(j).id = salon_id 
                                and response_message = "Http 200 Ok"
            or
                error_message = "Http 401, Permission Denied"
                  => len(access_token) = 0
                      and exists[i: inset dom(salon_services)] | salon_services(i).id = category_id
            or
                error_message = "Http 401, Permission Denied"
                  => access_token = nil
                      and exists[i: inset dom(salon_services)] | salon_services(i).id = category_id

end_process;

process CreateSalonService(access_token: token, user: SalonUser, category: SalonServiceCategoryData, salon: SalonData, salon_service: SalonServiceData) created_service: SalonServiceData, response_status: string | error_message
/* 
Create a salon service for a specific salon
 */ 
ext rd salons_table
ext rd salon_services_categories
ext wr salon_services
ext wr single_salon_services

pre not exists[i: inset dom(single_salon_services)] | i = salon_service | i.id = salon_service.id
post single_salon_services = override(~single_salon_services, {salon_service -> salon})
            and single_salon_services(created_service) = salon 
                and single_salon_services <> ~single_salon_services
                  and category inset(elems(salon_services_categories))
                    and salon_services = override(salon_services, {salon_service -> category}
                      and salon_services <> ~salon_services
                        and exists[i: inset dom(single_salon_service)] | i = created_service | single_salon_service(i) = salon
                          and exists[j: inset dom(salon_service)] | salon_services(j) = category
                            and response_status = "Http 200 Ok"
          => len(access_token) <> 0
                and access_token <> nil
                  and salons_table(salon) = user
                    and user.role = <SALONOWNER>
        or
            error_message = "Http 401, Permission Denied"
                 => len(access_token) = 0 
                        and salons_table(salon) = user
                            and user.role = <SALONOWNER>
                                and not exists[i: inset dom(single_salon_services)] | i = salon_service | i.id = salon_service.id
        or 
            error_message = "Http 401, Permission Denied"
                 => access_token = 0 
                        and salons_table(salon) = user
                            and user.role = <SALONOWNER>
                                and not exists[i: inset dom(single_salon_services)] | i = salon_service | i.id = salon_service.id
                
end_process;

process GetSalonService(access_token: token, salon: SalonData, service_id: string, salonuser: SalonUser) salon_service: SalonServiceData, response_status: string | error_message: string
/* API resource path: /salons/{salon_id}/salon-services/{service_id}
Get salon services for a specific salon owned by a given user
 */

ext rd single_salon_services
ext rd salons_table

pre exists[i: inset dom(single_salon_services)] | i.id = service_id

post exists![i: inset dom(single_salon_services)] | single_salon_services(i).id = service_id
                and salon_service.id = service_id
                  and exists[j: inset dom(salons_table)] | j = salon and salons_table(j) = salonuser
                    and response_status = "Http 200 Ok"
                => len(access_token) <> 0
                    and access_token <> nil
                      and salons_table(salon) = salonuser
                        and salonuser.role = <SALONOWNER>
            or
              error_message = "Http 401, Permission Denied"
              => len(access_token) = 0
                    and salons_table(salon) = salonuser
                      and salonuser.role = <SALONOWNER>
                        and error_message = "Http 401, Permission Denied"
            or 
                error_message = "Http 401, Permission Denied"
                    => access_token = nil
                        and salons_table(salon) = salonuser
                            and salonuser.role = <SALONOWNER>
                                and error_message = "Http 401, Permission Denied"
            or  
                exists![i: inset dom(single_salon_services)] | i.id = service_id
                    and salon_service.id = service_id
                        and exists[j: inset dom(salons_table)] | j = salon and salons_table(j) = salonuser
                            and response_status = "Http 403, Forbidden"
                => len(access_token) <> 0
                    and access_token <> nil
                      and salons_table(salon) = salonuser
                        and salonuser.role <> <SALONOWNER>
              
end_process;

process DeleteSalonService(access_token: token, salon: SalonData, service_id: string, salonuser: SalonUser) deleted_service: SalonServiceData, response_status: string | error_message: string

/* API resource path: /salons/{salon_id}/salon-services/{service_id}
ext rd single_salon_services
ext rd salons_table

pre exists[i: inset dom(single_salon_services)] | single_salon_services(i) = salon
post not exists[i: inset dom(single_salon_services)] | i = deleted_service | i.linked_busines = salon
                => len(access_token) <> 0
                    and access_token <> nil 
                      and single_salon_services = override(~single_salon_services, {deleted_service -> salon})
                        and deleted_service.id = service_id
                         and salons_table(salon) = salonuser
                           and salonuser.role = <SALONOWNER>
                            and response_message = "Http 204"
            or
              error_message = "Http 401, Permission Denied"
                => len(access_token) = 0
                      and salons_table(salon) = salonuser
                        and salonuser.role = <SALONOWNER>
            or 
                error_message = "Http 401, Permission Denied"
                    => access_token = nil
                            and salons_table(salon) = salonuser
                                and salonuser.role = <SALONOWNER>
            or  error_message = "Http 403, Forbidden"
                    => len(access_token) <> 0
                        and access_token <> nil
                            and exists[i: inset dom(single_salon_services)] | single_salon_services(i) = salon
                                and salons_table(salon) = salonuser
                                    and salonuser.role <> <SALONOWNER>
end_process;

process GetSalonCustomers(access_token: token, salon_id: string) customers: SalonCustomers, response_status: string | error_message: string
/* API resource path: /salons/{salon_id}/customers */

ext rd salon_customers_table 

pre exists[i: inset rng(salon_customers_table)] | i.id = salon_id
post customers = salon_customers_table 
                => exists[i: inset rng(salon_customers_table)] | i.id = salon_id
                  and len(access_token) <> 0
                    and access_token <> nil
                      and response_status = "Http 200 Ok"
            or 
              error_message = "Http 401, Permission Denied"
                => len(access_token) = 0
                      and exists[i: inset rng(salon_customers_table)] | i.id =salon_id
            or 
              error_message = "Http 401, Permission Denied"
                => access_token = nil
                      and exists[i: inset rng(salon_customers_table)] | i.id =salon_id


end_process;

process AddSalonCustomer(access_token: token, salon: SalonData, salonuser, saloncustomer: SalonUser) added_customer: SalonUser, response_status: string | error_message: string
/* API resource path: /salons/{salon_id}/customers */
ext wr salon_customers_table
ext rd salons_table
ext rd salon_users_table

pre not exists[i: inset dom(salon_customers_table)] | i = saloncustomer and i.role = <SALONCUSTOMER> 
                    and exists[j: inds(salon_users_table)] | j.role = <SALONCUSTOMER>
post salon_customers_table = override(~salon_customers_table, {saloncustomer -> salon}) and added_customer inset dom(salon_customers_table)
                  => len(access_token) <> 0
                      and access_token <> nil
                        and exists[i: inset dom(salon_customers_table)] | i = saloncustomer and i.role = <SALONCUSTOMER> and salon_customers_table(i) = salon
                          and salons_table(salon) = salonuser
                            and salonuser.role = <SALONOWNER>
                              and response_message = "Http 200 Ok"
            or 
                error_message = "Http 401, Permission Denied"
                  => len(access_token) = 0 
                        and exists[i: inds(salon_users_table)] | salon_users_table(i) = salonuser | salon_users_table(i).role = <SALONOWNER>
                            and not exists[j: inset dom(salon_customers_table)] | j = saloncustomer and j.role = <SALONCUSTOMER> 
            or error_message = "Http 401, Permission Denied"
                  => access_token = nil 
                        and exists[i: inds(salon_users_table)] | salon_users_table(i) = salonuser | salon_users_table(i).role = <SALONOWNER>
                            and not exists[j: inset dom(salon_customers_table)] | j = saloncustomer and j.role = <SALONCUSTOMER> 
            or error_message = "Http 403, Forbidden"
                => 
                    len(access_token) <> 0
                      and access_token <> nil
                        not exists[i: inset dom(salon_customers_table)] | i = saloncustomer | i.role = <SALONCUSTOMER>
                            and exists[j: inds(salon_users_table)] | j = salonuser | j.role <> <SALONOWNER>
                                


end_process;

process GetSalonCustomer(access_token: token, salon_id: string, customer_id: string) saloncustomer: SalonUser, response_status: string | error_message: string
/* API resource path: /salons/{salon_id}/customers/{customer_id} */
ext rd salon_customers_table

post exists![i: inset dom(salon_customers_table)] | i = saloncustomer | salon_customers_table(i).id = salon_id
              => len(access_token) <> 0
                    and access_token <> nil
                      and saloncustomer inset dom(salon_customers_table)
                        and saloncustomer.id = customer_id
                          and saloncustomer.role = <SALONCUSTOMER>
                            and response_status = "Http 200"
        or 
            error_message = "Http 401, Permission Denied"
              => len(access_token) = 0 
                    and exists![i: inset dom(salon_customers_table)] | i.id = customer_id and saloncustomer.id = customer_id and salon_customers_table(i).id = salon_id

        or
            error_message = "Http 401, Permission Denied"
              => access_token = nil 
                    and exists![i: inset dom(salon_customers_table)] | i.id = customer_id and saloncustomer.id = customer_id and salon_customers_table(i).id = salon_id
        or 
            error_message = "Http 403, Forbidden"
                => len(access_token) <> 0
                    and access_token <> nil
                        and exists![i: inset dom(salon_customers_table)] | i.id = customer_id and saloncustomer.id = customer_id | salon_customers_table(i).id = salon_id | i.role <> <SALONCUSTOMER>
                        

end_process;

process DeleteSalonCustomer(access_token: token, salon: SalonData, customer_id: string) deleted_customer: SalonUser, response_status: string | error_message: string

ext wr salon_customers_table

pre exists[i: inset dom(salon_customers_table)] | i.id = customer_id
post salon_customers_table = override(~salon_customers_table, {deleted_customer -> salon })
            => len(access_token) <> 0
                  and access_token <> nil 
                    and exists![i: inset dom(~salon_customers_table)] | i.id = customer_id | salon_customers_table(i) = salon
                      and deleted_customer.id = customer_id
                        and salon_customers_table(deleted_customer) = salon
                          and deleted_customer.role = <SALONCUSTOMER>
                            and response_status = "Http 204"
        or 
            error_message = "Http 401, Permission Denied"
                          => len(access_token) = 0 
                                and exists![i: inset dom(~salon_customers_table)] | i.id = customer_id | salon_customers_table(i) = salon
        or
            error_message ="Http 401, Permission Denied"
                          => access_token = nil 
                                and exists![i: inset dom(~salon_customers_table)] | i.id = customer_id | salon_customers_table(i) = salon
        or error_message = "Http 403, Forbidden"
            => len(access_token) <> 0
                  and access_token <> nil 
                    and exists![i: inset dom(~salon_customers_table)] | i.id = customer_id | salon_customers_table(i) = salon | i.role <> <SALONCUSTOMER>

end_process;


process GetSalonBookings(access_token: token, user: SalonUser) bookings: SalonBookings, response_status: string | error_message: string
/* get salon bookings for a salon customer */

ext rd salon_bookings_table 

pre exists[i: inset dom(salon_bookings_table)] | salon_bookings_table(i) = user
post bookings = salon_bookings_table =>
            len(access_token) <> 0
              and access_token <> nil
                exists[i: inset dom(salon_bookings_table)] | salon_bookings_table(i) = user
                  and user.role = <SALONCUSTOMER>
                    and response_status = "Http 200"
        or
          error_message = "Http 401, Permission Denied"
            => len(access_token) = 0
                    and user.role = <SALONCUSTOMER>
        or error_message = "Http 401, Permission Denied"
            => access_token = nil
                    and user.role = <SALONCUSTOMER>
        or error_message = "Http 403, Forbidden"
            => len(access_token) <> 0
                and access_token <> nil
                    exists[i: inset dom(salon_bookings_table)] | salon_bookings_table(i) = user | salon_bookings_table(i).role <> <SALONCUSTOMER>

end_process;

process GetSalonBooking(access_token: token, user: SalonUser, booking_id: string) booking: SalonBookingData, response_status: string | error_message:string
/* Get single booking for a customer */ 
ext rd salon_bookings_table

pre exists[i: inset dom(salon_bookings_table)] | i.id = booking_id | salon_bookings_table(i) = user
post exists![i: inset dom(salon_bookings_table)] | i.id = booking_id and booking.id = booking_id | salon_bookings_table(i) = user
                => len(access_token) <> 0
                    and access_token <> nil
                      and booking inset dom(salon_bookings_table)
                        and salon_bookings_table(booking) = user
                          and salon_bookings_table(boooking).role = <SALONCUSTOMER>
                            and response_status = "Http 200 Ok"
            or 
                error_message = "Http 401, Permission Denied"
                  => len(access_token) = 0
                        and exists![i: inset dom(salon_bookings_table)] | i.id = booking_id | salon_bookings_table(i) = user and user.role = <SALONCSUTOMER>
            or
                error_message = "Http 401, Permission Denied"
                  => access_token = nil
                        and exists![i: inset dom(salon_bookings_table)] | i.id = booking_id | salon_bookings_table(i) = user and user.role = <SALONCSUTOMER>
            
            or
                error_message ="Http 403, Forbidden"
                    => len(access_token) <> 0
                            and access_token <> nil
                                and exists![i: inset dom(salon_bookings_table)] | i.id = booking_id | salon_bookings_table(i) = user and user.role <> <SALONCSUTOMER>


end_process;

process DeleteSalonBooking(access_token: token, user: SalonUser, booking_id: string) deleted_booking: SalonBookingData, response_status: string |  error_message: string
/* API resource path: /salons/{user_id}/bookings/{booking_id}
Delete booking of a customer */

ext wr salon_bookings_table

pre exists[i: inset dom(salon_bookings_table)] | i.id = booking_id | salon_bookings_table(i) = user
post salon_bookings_table = override(~salon_bookings_table, {deleted_booking -> user}) and user.role = <SALONOWNER>
            => len(access_token) <> 0
                  and access_token <> nil
                    and exists![i: inset dom(salon_bookings_table)] | i.id = booking_id | salon_bookings_table(i) = user
                      and salon_bookings_table(deleted_booking) = user
                        and user.role = <SALONCUSTOMER>
                          and response_status = "Http 204"
        or
            error_message = "Http 401, Permission Denied"
              => len(access_token) = 0
                    and exists[i: inset dom(salon_bookings_table)] | i.id = booking_id | salon_bookings_table(i) = user and user.role = <SALONOWNER>
        or 
            error_message = "Http 401, Permission Denied"
              => access_token = nil
                    and exists![i: inset dom(salon_bookings_table)] | i.id = booking_id | salon_bookings_table(i) = user and user.role = <SALONOWNER>
        or error_message = "Http 403, Forbidden"
                => len(access_token) <> 0
                  and access_token <> nil
                    and exists![i: inset dom(salon_bookings_table)] | i.id = booking_id | salon_bookings_table(i) = user
                      and salon_bookings_table(deleted_booking) = user
                        and user.role <> <SALONCUSTOMER>
end_process;


process AddSalonStylist(access_token: token, salon_id: string, stylist:SalonStylistData) response_message: string
/* API resource path: /salons/{salon_id}/stylists */ 

ext wr salon_stylist_table
pre
post

end_process;

process GetSalonStylists(access_token: token, salon_id: string) salon_stylists: SalonStylists, response_message: string
/* API resource path: /salons/{salon_id}/stylists
ext rd salon_stylist_table 
pre
post

end_process;

process GetSalonStylist(access_token: token, salon_id: string, stylist_id: string) stylist: SalonStylistData, response_message: string
/* API resource path: /salons/{salon_id}/stylists/{stylist_id}

ext rd salon_stylist_table
pre
post

end_process;

process DeleteSalonStylist(access_token: token, salon_id: string, stylist_id: string) response_message: string

/* API resource path: /salons/{salon_id}/stylists/{stylist_id}
ext wr salon_stylist_table
pre
post

end_process;