/* SOFL Formal specifications for Salon API project */
/* Begin class declarations */

class UserType;
type
type_of_user = {<SALONOWNER>, <SALONCUSTOMER>}
salonuser = composed of
            id = string
            email = string
            password = string
            date_of_birth = DOB
            nationality = string
            city = string
      end;

var
user_type: type_of_user
user: salonuser


method Init()
post user_type = nil

end_method;

method is_salonOwner(user: salonuser) result: string
post user inset user_type and result = <SALONOWNER>
end_method;

method is_salonCustomer(user: salonuser) result: string
post user inset user_type and result = <SALONCUSTOMER>
end_method;


end_class;


class SalonUser / UserType;
/* class SalonUser inherits UserType */

type
Year = string;
Month = string;
Day = string;
DOB = Year * Month * Day;


inv

len(id) == 36; /* define ids as of standard UUID string type with length of 36 characters *


method Init()
post id = nil and email = nil and password = nil and date_of_birth = nil
  and nationality = nil and city = nil
end_method;

end_class;

class Price;

var
service_price: nat0

inv
0 < service_price <= 1000000
method Init()
  post service_price = 0
end_method;

method validPrice(service_price: nat0) service_price: nat0
  post (exists[x: nat0] | 0 < x <= 100000 and service_price = x)
end_method;

end_class;

/* End class declarations */


module Salon_API;

type
Year = string;
Month = string;
Day = string;
DOB = Year * Month * Day;

hour = string;
minutes = string;
token = string;

Timestamp = Year * Month * Day * hour * minutes;

AddressData = composed of
                address_country = string
                address_city = string
                address_region = string
                postal_code = string
                address_street = string
                latitude = nat0
                longitude = nat0
              end;


SalonData = composed of
              id = string
              owner = SalonUser
              business_name = string
              business_type = string
              business_description = string
              business_phone_number = string
              business_email = string
              business_address = AddressData
              price_range = string
              created = Timestamp
            end;

SalonServiceCategoryData = composed of
                            id = nat0
                            owner = SalonUser
                            category_name = string
                            created = Timestamp
                          end;

SalonServiceData = composed of
                    id = string
                    owner = SalonUser
                    service_category = SalonServiceCategoryData
                    linked_business = SalonData
                    service_price = Price
                    service_duration = string
                    service_name = string
                  end;

SalonServiceCancellationReasonData = composed of
                                      id = string
                                      owner = SalonUser
                                      cancellation_reason = string
                                      added_date = Timestamp
                                    end;

SalonBookingData = composed of
                    id = string
                    salon_customer = SalonUser
                    booked_in_by = SalonUser
                    stylist = SalonUser
                    booked_service = SalonServiceData
                    booking_creation_date: Timestamp
                    service_date: Timestamp
                    service_started = bool
                    service_completed = bool
                    service_cancelled = bool
                    cancellation_reason = SalonServiceCancellationReasonData
                    negotiate_service_price = bool
                    negotiated_price = Price
                  end;

SalonOperationDaysData = composed of
                          id = string
                          owner = SalonUser
                          linked_business = SalonData
                          day_of_week = string
                          start_time = Timestamp 
                          end_time = Timestamp
                        end;

SalonStylistData = composed of 
                    id = string
                    owner = SalonUser
                    first_name = string
                    last_name = string
                    phone_number = string
                    email = string
                    salon_service = SalonServiceData
                    salon_branch = SalonData
                    working_days = SalonOperationDaysData
                    date_joined = Timestamp
                  end;

SalonServiceTable = map SalonServiceData to SalonServiceCategoryData;
SalonServiceCategoryTable = seq of SalonServiceCategoryData
SalonCustomers = map SalonUser to SalonData
SalonBookings = map SalonBookingData to SalonUser
SalonStylists = map SalonStylistData to SalonData
SalonTable = map SalonData to SalonUser;
SingleSalonServiceTable = map SalonServiceData to SalonData;

var

/* External data store for salon records */
salons_table: SalonTable
salon_services: SalonServiceTable
single_salon_services: SingleSalonServiceTable
salon_services_categories: SalonServiceCategoryTable
salon_customers_table: SalonCustomers
salon_bookings_table: SalonBookings
salon_stylist_table: SalonStylists

inv
forall[i,j: inds(salon_services_categories)] | i <> j => salon_services_categories(i).id <> salon_services_categories(j).id;
/* Each salon category is unique */



process Init()

explicit
salonowner := new SalonUser
saloncustomer := new SalonUser
service_price := new Price

end_process;

 
process RetrieveSalon(access_token: token, id:string, owner: SalonUser) salon: SalonData
/* API resource path: /salons/{salon_id} */
ext rd salons_table
pre exists[i: inset dom(salons_table)] | i.id = id 
                and salons_table(i) = owner and elems(access_token) <> {} and elems(access_token) <> Nil
post exists![i: inset dom(salons_table)] | i.id = id 
                and salons_table(i) = owner => salon.owner = owner and salon.id = id

end_process;

process RetrieveSalons(access_token: token, resource_path: string) salons: SalonTable, response_message: string
/* API resource path: /salons */
ext rd salons_table
pre elems(access_token) <> {} and elems(access_token) <> Nil and elems(resource_path) <> {}
post (elems(access_token) <>  {}  and elems(resource_path) <> {} ) => salons = salons_table and response_message ="Http 200 Ok"
                 or (len(access_token) = 0 and elems(resource_path) <> {}) => salons = {->} and response_message = "Http 401, permission denied"

end_process;

process AddSalon(access_token:token, salon: SalonData, salonuser: SalonUser) response_message: string
/* API resource path: /salons */
ext wr salons_table
/* Pre condition: Access token must be provided and salonuser must be a salon owner */
explicit
begin
    salonuser := new SalonUser
    usertype = salonuser.is_salonOwner(salonuser)
end
pre elems(access_token) <> {} and elems(access_token) <> Nil and usertype = <SALONOWNER>
 
post salon inset dom(salons_table) and salonuser = salons_table(salon) 
                 => override(~salons_table, {salon -> salonuser})
                and salons_table <> ~salons_table 
                and response_message = "200 OK, New salon added successfully"

end_process;

process DeleteSalon(access_token:token, id: string, salon_id=string) response_message: string
/* API resource path: /salons/{salon_id} */

ext wr salons_table
pre exists![i: inset dom(~salons_table)] | ~salons_table(i).id = salon_id and elems(access_token) <> {} and elems(access_token) <> Nil
post not exists[i: inset dom(salons_table)] | salons_table(i).id = salon_id 
                and salons_table <> ~salons_table 
                and respons_message = "Http 200 Ok, Salon deleted successfully" 

end_process;

process AddSalonServiceCategory(access_token:token, category: SalonServiceCategoryData) response_message: string

/* API resource path: /salons/salon-services-categories */
ext wr salon_services_categories
pre elems(access_token) <> {} and elems(access_token) <> Nil and not exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category.id
post salon_services_categories = conc(~salon_services_categories, [category]) 
                and len(salon_services_categpories) <> len(~salon_services_categories)
                and response_message = "Http 200 OK, category created successfully"

end_process;

process GetSalonServiceCategories(request_path: string, access_token: token) service_categories: SalonServiceCategoryTable, response_message: string
/* API resource path: /salons/salon-services-categories */
ext rd salon_services_categories
pre elems(request_path) <> {} and elems(access_token) <> {} and elems(access_token) <> Nil
post service_categories = salon_services_categories 
                and response_message = "Http 200 Ok, service categories retrieved successfully"

end_process;

process GetSalonServiceCategory(access_token: token, category_id: string) service_category: SalonServiceCategoryData, response_message: string
/* API resource path: /salons/{salon_id}/salon-services-categories/{category_id} */
ext rd salon_services_categories
pre elems(access_token) <> {} and elems(access_token) <> Nil
post exists![i: inds(salon_services_categories)] | salon_services_categories(i).id = category_id 
                and service_category.id = category_id
                and response_message = "Http 200, category retrieved successfully"
                or not exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category_id 
                and response_message = "Http 404, category not found"

end_process;

process DeleteSalonServiceCategory(access_token: token, category_id: string) deleted_category: SalonServiceCategoryData, response_message: string
/* API resource path: /salons/{salon_id}/salon-services-categories/{category_id} */
ext wr salon_services_categories
pre elems(access_token) <> {} and elems(access_token) <> Nil and exists[i: inds(salon_services_categories)] | salon_services_categories(i).id = category_id
post salon_services_categories = conc(~salon_services_categories, [deleted_category])
                and len(salon_services_categories) <> len(~salon_services_categories)
                and deleted_category.id = category_id
                and response_message = "Http 200 Ok, category deleted successfully)

end_process;

process GetSalonCategoryServices(access_token: token, salon_id, category_id: string) service_list: SalonServiceTable, response_message: string
/* API resource path: /salons/{salon_id}/salon-services-categories/{category_id}/salon-services */ 
ext rd single_salon_services
ext rd salon_services
pre elems(access_token) <> {} and elems(access_token) <> Nil
/* Get specific salon services for a specific service category */
post exists[i: inset dom(salon_services)] | salon_services(i) = i.category_id 
                and exists[j: inset dom(single_salon_services)] | single_salon_services(j) = j.salon_id 
                and service_list = single_salon_services
                and response_message = "Http 200 Ok"

end_process;

process CreateSalonService(access_token: token, user: SalonUser, category_id:nat0, salon_id: string, salon_service: SalonServiceData) response_message: string
/* API resource path: /salons/{salon_id}/salon-services-categories/{category_id}/salon-services */ 
ext rd salons_table
ext rd salon_services_categories
ext wr salon_services
ext wr single_salon_services
pre elems(access_token) <> {} and elems(access_token) <> Nil
/* Create a salon service for a specific salon */
post response_message = "Http 200 Ok" => exists[i: inset dom(salons_table)] | salons_table(i) = user
                and exists[j: inset dom(single_salon_service)] | single_salon_services(j).id = salon_id
                and single_salon_services = override(~single_salon_services, {salon_service -> salons_table(i)})
                and single_salon_service <> ~single_salon_services
                and salon_services = override(~salon_services, {salon_service -> salon_services_categories(category_id)})
                and salon_services <> ~salon_services
                
end_process;

process GetSalonService(access_token: token, salon_id, service_id: string, salonuser: SalonUser) salon_service: SalonServiceData, response_message: string
/* API resource path: /salons/{salon_id}/salon-services/{service_id}
Get salon services for a specific salon owned by a given user
 */

ext rd single_salon_services
ext rd salons_table
explicit
begin
    salonuser := new SalonUser
    usertype = salonuser.is_salonOwner(salonuser)
end
pre elems(access_token) <> {} and elems(access_token) <> Nil

post exists[i: inset dom(single_salon_services)] | single_salon_services(i).id = salon_id
                and salon_service.id = service_id
                and single_salon_services(i) = salons_table(salonuser)
                and user_type = <SALONOWNER>
                and response_message = "Http 200 ok, service retrieved successfully"

end_process;

process DeleteSalonService(access_token: token, salon_id, service_id: string, salonuser: SalonUser) deleted_service: SalonServiceData, response_message: string

/* API resource path: /salons/{salon_id}/salon-services/{service_id}
ext rd single_salon_services
ext rd salons_table
explicit
begin
    salonuser := new SalonUser
    usertype = salonuser.is_salonOwner(salonuser)
end

pre elems(access_token) <> {} and elems(access_token) <> Nil and exists[i: inset dom(single_salon_services)] | single_salon_services(i).id = salon_id
post exists[i: inset dom(single_salon_services)] | i = deleted_service
                and override(~single_salon_services, {deleted_service -> single_salon_services(i)}) = single_salon_services
                and deleted_service.id = service_id
                and salons_table(salonuser).id = salon_id
                and usertype = <SALONOWNER>
                and response_message = "Http 200 ok, service deleted successfully"

end_process;

process GetSalonCustomers(access_token: token, salon_id: string) customers: SalonCustomers, response_message: string
/* API resource path: /salons/{salon_id}/customers */

ext rd salon_customers_table 

pre elems(access_token) <> {} and elems(access_token) <> Nil
post customers = salon_customers_table => exists[i: inset dom(salon_customers_table)] | salon_customers_table(i).id = salon_id
                and response_message = "Http 200 Ok"

end_process;

process AddSalonCustomer(access_token: token, salonuser, saloncustomer: SalonUser) response_message: string
/* API resource path: /salons/{salon_id}/customers */
ext wr salon_customers_table
ext rd salons_table
explicit
begin
    salonuser := new SalonUser
    saloncustomer := new SalonUser
    usertype = salonuser.is_salonOwner(salonuser)
end
pre elems(access_token) <> {} and elems(access_token) <> Nil
post salon_customers_table = override(~salon_customers_table, {saloncustomer -> salons_table(salonuser)})
                and salons_table(salonuser).id = salonuser.id
                and usertype = <SALONOWNER>
                and response_message = "Http 200 Ok"

end_process;

process GetSalonCustomer(access_token: token, salon_id: string, customer_id: string) saloncustomer: SalonUser, response_message: string
/* API resource path: /salons/{salon_id}/customers/{customer_id} */
ext rd salon_customers_table
ext rd salons_table
explicit
begin
    salonuser := new SalonUser
    saloncustomer := new SalonUser
    usertype = saloncustomer.is_salonCustomer(saloncustomer)
end

pre elems(access_token) <> {} and elems(access_token) <> Nil and exists[i: inset dom(salon_customers_table)] | salon_customers_table(i).id = salon_id
post exists[i: inset dom(salon_customers_table)] | salon_customers_table(i).id = salon_id
                and saloncustomer = salons_table(salon_customers_table(i))
                and saloncustomer.id = salons_table(salon_customers_table(i)).customer_id
                and usertype = <SALONCUSTOMER>
                and response_message = "Http 200 OK"
end_process;

process DeleteSalonCustomer(access_token: token, salon_id: string, customer_id: string)deleted_customer: SalonUser, response_message: string
/* API resource path: /salons/{salon_id}/customers/{customer_id} */
ext wr salon_customers_table

explicit
begin
    deleted_customer := new SalonUser
    usertype = deleted_customer.is_salonCustomer(deleted_customer)
end
pre elems(access_token) <> {} and elems(access_token) <> Nil and exists[i: inset dom(salon_customers_table)] | i.id = customer_id
post salon_customers_table = override(~salon_customers_table, {deleted_customer -> salon_customers_table(deleted_customer)})
            and ~salon_customers_table <> salon_customers_table
            and salon_customers_table(deleted_customer).id = salon_id
            and usertype = <SALONCUSTOMER>
            and response_message = "Http 200 OK"

end_process;


process GetSalonBookings(access_token: token, user: SalonUser, salon_id: string) bookings: SalonBookings, response_message: string
/* API resource path: /salons/{salon_id}/bookings
ext rd salon_bookings_table 
ext rd salons_table
explicit
begin
    user := new SalonUser
    usertype = user.is_salonCustomer(user)
end
pre elems(access_token) <> {} and elems(access_token) <> Nil
post salon_bookings_table = bookings =>
            exists[i: inset dom(salon_bookings_table)] | i = bookings 
            and exists[j: inset dom(salons_table)] | j.id = salon_id
            and usertype = <SALONOWNER>
            and response_message = "Http 200 Ok"

end_process;

process GetSalonBooking(access_token: token, user: SalonUser, booking_id: string) booking: SalonBookingData, response_message: string
/* API resource path: /salons/{salon_id}/bookings/{booking_id} */ 
ext rd salon_bookings_table
explicit
begin
    user := new SalonUser
    usertype = user.is_salonCustomer(user)
end
pre elems(access_token) <> {} and elems(access_token) <> Nil and exists[i: inset dom(salon_bookings_table)] | salon_bookings_table(i).id = booking_id
post exists[i: inset dom(salon_bookings_table)] | salon_bookings_table(i).id = booking_id
        and user = salon_bookings_table(booking)
        and usertype = <SALONCUSTOMER>
        and response_message = "Http 200 Ok, Booking retrieved successfully"

end_process;

process DeleteSalonBooking(access_token: token, user: SalonUser, booking_id: string) deleted_booking: SalonBookingData, response_message: string
/* API resource path: /salons/{user_id}/bookings/{booking_id}
ext wr salon_bookings_table
ext rd salons_table
explicit
begin
    user := new SalonUser
    usertype = user.is_salonCustomer(user)
end
pre elems(access_token) <> {} and elems(access_token) <> Nil and exists[i: inset dom(salon_bookings_table)] | salon_bookings_table(i).id = booking_id
post salon_bookings_table = override(~salon_bookings_table, {deleted_booking -> salons_table(salon_bookings_table(deleted_booking))})
            and ~salon_bookings_table <> salon_bookings_table
            and salons_table(salon_bookings_table(deleted_booking)) = user.salonuser.id
            and usertype = <SALONCUSTOMER>
            and response_message ="Http 200 Ok, Booking deleted"

end_process;


process AddSalonStylist(access_token: token, salon_id: string, stylist:SalonStylistData) response_message: string
/* API resource path: /salons/{salon_id}/stylists */ 

ext wr salon_stylist_table
pre
post

end_process;

process GetSalonStylists(access_token: token, salon_id: string) salon_stylists: SalonStylists, response_message: string
/* API resource path: /salons/{salon_id}/stylists
ext rd salon_stylist_table 
pre
post

end_process;

process GetSalonStylist(access_token: token, salon_id: string, stylist_id: string) stylist: SalonStylistData, response_message: string
/* API resource path: /salons/{salon_id}/stylists/{stylist_id}

ext rd salon_stylist_table
pre
post

end_process;

process DeleteSalonStylist(access_token: token, salon_id: string, stylist_id: string) response_message: string

/* API resource path: /salons/{salon_id}/stylists/{stylist_id}
ext wr salon_stylist_table
pre
post

end_process;